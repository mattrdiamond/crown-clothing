{"ast":null,"code":"var _jsxFileName = \"/Users/matt_diamond/Documents/Lynda/udacity/_nano/Projects/crown-clothing/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport HomePage from \"./pages/homepage/homepage.component\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport CheckoutPage from \"./pages/checkout/checkout.component.jsx\";\nimport Header from \"./components/header/header.component\";\nimport { auth, createUserProfileDocument // **TEMP** - addCollectionAndDocuments for adding shop data to fb\n\n/*, addCollectionAndDocuments*/\n} from \"./firebase/firebase.utils\";\nimport { connect } from \"react-redux\";\nimport { selectCurrentUser } from \"./redux/user/user.selectors\"; // *TEMP* - selectCollectionsForPreview is for adding shop data to fb\n// import { selectCollectionsForPreview } from \"./redux/shop/shop.selectors\";\n\nimport { createStructuredSelector } from \"reselect\";\nimport SignInAndSignUpPage from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.component\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {// **TEMP** collectionsArray is for adding shop data to Firebase (remove once added)\n    // const { setCurrentUser /*, collectionsArray*/ } = this.props;\n    // onAuthStateChanged is open subscription between app and firebase which lets us know\n    // when authentication state has changed without having to fetch manually.\n    // auth.onAuthStateChanged returns a function which when executed will close script subscription.\n    // @param userAuth: user authenticated object from Auth library, which persists when refreshing page. Includes user ID generated by FireStore (UID)\n    // this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n    //   if (userAuth) {\n    //     // get userReference from db or create one\n    //     const userRef = createUserProfileDocument(userAuth);\n    //     // onSnapshot() subscribes to userRef and listens for any changes. Returns snapShot of user object. Also returns initial state first time code is executed.\n    //     // snapShot.data() method gives us actual properties on the snapshot object (aka data)\n    //     (await userRef).onSnapshot(snapShot => {\n    //       setCurrentUser({\n    //         currentUser: {\n    //           id: snapShot.id,\n    //           ...snapShot.data()\n    //         }\n    //       });\n    //     });\n    //   } else {\n    //     // If user signs out, set currentUser to null\n    //     setCurrentUser(userAuth);\n    //     /*\n    //     *TEMP* Add shop data to firestore - only want title and items (firebase will generate id and routeName)\n    //     addCollectionAndDocuments(\n    //       \"collections\",\n    //       collectionsArray.map(({ title, items }) => ({ title, items }))\n    //     );\n    //     */\n    //   }\n    // });\n  }\n\n  componentWillUnmount() {\n    // Close subscription to firebase to prevent memory leaks from open connection.\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/checkout\",\n      component: CheckoutPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/signin\",\n      render: () => this.props.currentUser ? React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }) : React.createElement(SignInAndSignUpPage, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser // **TEMP** - selectCollectionsForPreview is for adding shop data to fb\n  // , collectionsArray: selectCollectionsForPreview\n\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // component > propName: payload => dispatch(action(payload)) > reducer > root-reducer(store)\n  // setCurrentUser(user) returns the object from user action which includes action type and payload\n  // that action is then dispatched to user reducer and then to root-reducer\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/matt_diamond/Documents/Lynda/udacity/_nano/Projects/crown-clothing/src/App.js"],"names":["React","Switch","Route","Redirect","HomePage","ShopPage","CheckoutPage","Header","auth","createUserProfileDocument","connect","selectCurrentUser","createStructuredSelector","SignInAndSignUpPage","App","Component","unsubscribeFromAuth","componentDidMount","componentWillUnmount","render","props","currentUser","mapStateToProps","mapDispatchToProps","dispatch","setCurrentUser","user"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,kBAAxC;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,YAAP,MAAyB,yCAAzB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,SACEC,IADF,EAEEC,yBAFF,CAGE;;AACA;AAJF,OAKO,2BALP;AAMA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,6BAAlC,C,CACA;AACA;;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,OAAOC,mBAAP,MAAgC,2DAAhC;;AAEA,MAAMC,GAAN,SAAkBd,KAAK,CAACe,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,mBADgC,GACV,IADU;AAAA;;AAGhCC,EAAAA,iBAAiB,GAAG,CAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB;AACA,SAAKF,mBAAL;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAEf,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAEC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,WAAlB;AAA8B,MAAA,SAAS,EAAEC,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAOE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,MAAM,EAAE,MACN,KAAKc,KAAL,CAAWC,WAAX,GACE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,GAGE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CAFF,CADF;AAwBD;;AApE+B;;AAuElC,MAAMC,eAAe,GAAGV,wBAAwB,CAAC;AAC/CS,EAAAA,WAAW,EAAEV,iBADkC,CAE/C;AACA;;AAH+C,CAAD,CAAhD;;AAMA,MAAMY,kBAAkB,GAAGC,QAAQ,KAAK;AACtC;AACA;AACA;AACAC,EAAAA,cAAc,EAAEC,IAAI,IAAIF,QAAQ,CAACC,cAAc,CAACC,IAAD,CAAf;AAJM,CAAL,CAAnC;;AAOA,eAAehB,OAAO,CAACY,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CT,GAA7C,CAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport HomePage from \"./pages/homepage/homepage.component\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport CheckoutPage from \"./pages/checkout/checkout.component.jsx\";\nimport Header from \"./components/header/header.component\";\nimport {\n  auth,\n  createUserProfileDocument\n  // **TEMP** - addCollectionAndDocuments for adding shop data to fb\n  /*, addCollectionAndDocuments*/\n} from \"./firebase/firebase.utils\";\nimport { connect } from \"react-redux\";\nimport { selectCurrentUser } from \"./redux/user/user.selectors\";\n// *TEMP* - selectCollectionsForPreview is for adding shop data to fb\n// import { selectCollectionsForPreview } from \"./redux/shop/shop.selectors\";\nimport { createStructuredSelector } from \"reselect\";\nimport SignInAndSignUpPage from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.component\";\n\nclass App extends React.Component {\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n    // **TEMP** collectionsArray is for adding shop data to Firebase (remove once added)\n    // const { setCurrentUser /*, collectionsArray*/ } = this.props;\n    // onAuthStateChanged is open subscription between app and firebase which lets us know\n    // when authentication state has changed without having to fetch manually.\n    // auth.onAuthStateChanged returns a function which when executed will close script subscription.\n    // @param userAuth: user authenticated object from Auth library, which persists when refreshing page. Includes user ID generated by FireStore (UID)\n    // this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n    //   if (userAuth) {\n    //     // get userReference from db or create one\n    //     const userRef = createUserProfileDocument(userAuth);\n    //     // onSnapshot() subscribes to userRef and listens for any changes. Returns snapShot of user object. Also returns initial state first time code is executed.\n    //     // snapShot.data() method gives us actual properties on the snapshot object (aka data)\n    //     (await userRef).onSnapshot(snapShot => {\n    //       setCurrentUser({\n    //         currentUser: {\n    //           id: snapShot.id,\n    //           ...snapShot.data()\n    //         }\n    //       });\n    //     });\n    //   } else {\n    //     // If user signs out, set currentUser to null\n    //     setCurrentUser(userAuth);\n    //     /*\n    //     *TEMP* Add shop data to firestore - only want title and items (firebase will generate id and routeName)\n    //     addCollectionAndDocuments(\n    //       \"collections\",\n    //       collectionsArray.map(({ title, items }) => ({ title, items }))\n    //     );\n    //     */\n    //   }\n    // });\n  }\n\n  componentWillUnmount() {\n    // Close subscription to firebase to prevent memory leaks from open connection.\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/shop\" component={ShopPage} />\n          <Route exact path=\"/checkout\" component={CheckoutPage} />\n          {/* If user signed in, redirect user to home page when clicking signin.\n            also redirects to home when user signs in.\n          render prop determines what component to return*/}\n          <Route\n            exact\n            path=\"/signin\"\n            render={() =>\n              this.props.currentUser ? (\n                <Redirect to=\"/\" />\n              ) : (\n                <SignInAndSignUpPage />\n              )\n            }\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n  // **TEMP** - selectCollectionsForPreview is for adding shop data to fb\n  // , collectionsArray: selectCollectionsForPreview\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // component > propName: payload => dispatch(action(payload)) > reducer > root-reducer(store)\n  // setCurrentUser(user) returns the object from user action which includes action type and payload\n  // that action is then dispatched to user reducer and then to root-reducer\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}
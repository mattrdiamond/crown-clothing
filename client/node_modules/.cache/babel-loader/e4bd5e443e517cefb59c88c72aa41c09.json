{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { auth, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport { googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure } from \"./user.actions\";\nexport function* signInWithGoogle() {\n  try {\n    // 1. - auth library returns an object that includes a user property which we can use to create userRef\n    //    - signInWithPopup (firebase) contains signIn options for several services (sign in with twitter, facebook etc). We just want google\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider); // 2. get userReference from db or create one\n\n    const userRef = yield call(createUserProfileDocument, user); // 3. get user snapshot object, which can be used to get the user data\n\n    const userSnapshot = yield userRef.get(); // 4. dispatch googleSignInSuccess action with user id. Also pass along rest of snapShot data (.data() method gives us actual properties on the snapshot object)\n\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const test = yield auth.signInWithEmailAndPassword(email, password);\n    console.log(\"test\", test);\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n} // instantiate all of the sagas we need to call\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart)]);\n}","map":{"version":3,"sources":["/Users/matt_diamond/Documents/Lynda/udacity/_nano/Projects/crown-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","googleSignInSuccess","googleSignInFailure","emailSignInSuccess","emailSignInFailure","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","signInWithEmail","payload","email","password","test","signInWithEmailAndPassword","console","log","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,QAIO,+BAJP;AAKA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,kBAHF,EAIEC,kBAJF,QAKO,gBALP;AAOA,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF;AACA;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,IAAI,CAACS,eAAL,CAAqBR,cAArB,CAAvB,CAHE,CAIF;;AACA,UAAMS,OAAO,GAAG,MAAMZ,IAAI,CAACI,yBAAD,EAA4BM,IAA5B,CAA1B,CALE,CAMF;;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAPE,CAQF;;AACA,UAAMhB,GAAG,CACPO,mBAAmB,CAAC;AAClBU,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADC;AAElB,SAAGF,YAAY,CAACG,IAAb;AAFe,KAAD,CADZ,CAAT;AAMD,GAfD,CAeE,OAAOC,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACQ,mBAAmB,CAACW,KAAD,CAApB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMpB,IAAI,CAACqB,0BAAL,CAAgCH,KAAhC,EAAuCC,QAAvC,CAAnB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBH,IAApB;AACD,GAHD,CAGE,OAAOL,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACU,kBAAkB,CAACS,KAAD,CAAnB,CAAT;AACD;AACF;AAED,OAAO,UAAUS,mBAAV,GAAgC;AACrC,QAAM7B,UAAU,CAACI,eAAe,CAAC0B,oBAAjB,EAAuClB,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUmB,kBAAV,GAA+B;AACpC,QAAM/B,UAAU,CAACI,eAAe,CAAC4B,mBAAjB,EAAsCX,eAAtC,CAAhB;AACD,C,CAED;;AACA,OAAO,UAAUY,SAAV,GAAsB;AAC3B,QAAM/B,GAAG,CAAC,CAACC,IAAI,CAAC0B,mBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument\n} from \"../../firebase/firebase.utils\";\nimport {\n  googleSignInSuccess,\n  googleSignInFailure,\n  emailSignInSuccess,\n  emailSignInFailure\n} from \"./user.actions\";\n\nexport function* signInWithGoogle() {\n  try {\n    // 1. - auth library returns an object that includes a user property which we can use to create userRef\n    //    - signInWithPopup (firebase) contains signIn options for several services (sign in with twitter, facebook etc). We just want google\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    // 2. get userReference from db or create one\n    const userRef = yield call(createUserProfileDocument, user);\n    // 3. get user snapshot object, which can be used to get the user data\n    const userSnapshot = yield userRef.get();\n    // 4. dispatch googleSignInSuccess action with user id. Also pass along rest of snapShot data (.data() method gives us actual properties on the snapshot object)\n    yield put(\n      googleSignInSuccess({\n        id: userSnapshot.id,\n        ...userSnapshot.data()\n      })\n    );\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const test = yield auth.signInWithEmailAndPassword(email, password);\n    console.log(\"test\", test);\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\n// instantiate all of the sagas we need to call\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}
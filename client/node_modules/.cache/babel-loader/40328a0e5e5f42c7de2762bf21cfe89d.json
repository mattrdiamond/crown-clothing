{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\"; //database\n\nimport \"firebase/auth\"; //authentication\n\nconst config = {\n  apiKey: \"AIzaSyAKQUl3X_MsB--NC2mmBv1QDlkYedesjyM\",\n  authDomain: \"e-commerce-9e6dc.firebaseapp.com\",\n  databaseURL: \"https://e-commerce-9e6dc.firebaseio.com\",\n  projectId: \"e-commerce-9e6dc\",\n  storageBucket: \"e-commerce-9e6dc.appspot.com\",\n  messagingSenderId: \"215401701740\",\n  appId: \"1:215401701740:web:1c4078516bb4ba942f5349\",\n  measurementId: \"G-45QGGVYL1N\"\n}; // take user auth object that we got back from auth library and store in database\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  console.log(\"userAuth\", userAuth); // 1. only save to db if a userAuth object is returned, because it is null when signed out\n\n  if (!userAuth) return; // Reference to location in db. uid will be id from auth library\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // 2. query firestore to see if object exists\n  // .get() returns a snapshot object which represents the data in that location in db, which we can use to see if userAuth exists\n\n  const snapShot = await userRef.get(); // if it doesn't exist, we want to create user in that location\n  // Use document reference object (userRef) to do CRUD operations rather than snapshot\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth(); // we imported firebase/auth above which gives us access to .auth() method on firebase. Export for anything we need related to authentication\n\nexport const firestore = firebase.firestore(); // set up google authentication utility\n\nconst provider = new firebase.auth.GoogleAuthProvider(); // gives us access to googleAuthProvider class from auth library\n// triggers google popup when we use googleAuthProvider for authentication and sign-in\n\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n}); // signInWithPopup contains popups for several services (sign in with twitter, facebook etc). We just want google\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider); // export firebase as default in case we want entire library\n\nexport default firebase;","map":{"version":3,"sources":["/Users/matt_diamond/Documents/Lynda/udacity/_nano/Projects/crown-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","console","log","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP,C,CAA6B;;AAC7B,OAAO,eAAP,C,CAAwB;;AAExB,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,kCAFC;AAGbC,EAAAA,WAAW,EAAE,yCAHA;AAIbC,EAAAA,SAAS,EAAE,kBAJE;AAKbC,EAAAA,aAAa,EAAE,8BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf,C,CAWA;;AACA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3EC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,QAAxB,EAD2E,CAE3E;;AACA,MAAI,CAACA,QAAL,EAAe,OAH4D,CAK3E;;AACA,QAAMI,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQN,QAAQ,CAACO,GAAI,EAApC,CAAhB,CAN2E,CAQ3E;AACA;;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAV2E,CAY3E;AACA;;AACA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBZ,QAA/B;AACA,UAAMa,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGZ;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOe,KAAP,EAAc;AACdd,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCa,KAAK,CAACC,OAAzC;AACD;AACF;;AAED,SAAOb,OAAP;AACD,CA/BM;AAiCPf,QAAQ,CAAC6B,aAAT,CAAuB5B,MAAvB;AAEA,OAAO,MAAM6B,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb,C,CAA8B;;AACrC,OAAO,MAAMd,SAAS,GAAGhB,QAAQ,CAACgB,SAAT,EAAlB,C,CAEP;;AACA,MAAMe,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB,C,CAAyD;AACzD;;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CACA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B,C,CACP;;AACA,eAAe/B,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\"; //database\nimport \"firebase/auth\"; //authentication\n\nconst config = {\n  apiKey: \"AIzaSyAKQUl3X_MsB--NC2mmBv1QDlkYedesjyM\",\n  authDomain: \"e-commerce-9e6dc.firebaseapp.com\",\n  databaseURL: \"https://e-commerce-9e6dc.firebaseio.com\",\n  projectId: \"e-commerce-9e6dc\",\n  storageBucket: \"e-commerce-9e6dc.appspot.com\",\n  messagingSenderId: \"215401701740\",\n  appId: \"1:215401701740:web:1c4078516bb4ba942f5349\",\n  measurementId: \"G-45QGGVYL1N\"\n};\n\n// take user auth object that we got back from auth library and store in database\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  console.log(\"userAuth\", userAuth);\n  // 1. only save to db if a userAuth object is returned, because it is null when signed out\n  if (!userAuth) return;\n\n  // Reference to location in db. uid will be id from auth library\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  // 2. query firestore to see if object exists\n  // .get() returns a snapshot object which represents the data in that location in db, which we can use to see if userAuth exists\n  const snapShot = await userRef.get();\n\n  // if it doesn't exist, we want to create user in that location\n  // Use document reference object (userRef) to do CRUD operations rather than snapshot\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth(); // we imported firebase/auth above which gives us access to .auth() method on firebase. Export for anything we need related to authentication\nexport const firestore = firebase.firestore();\n\n// set up google authentication utility\nconst provider = new firebase.auth.GoogleAuthProvider(); // gives us access to googleAuthProvider class from auth library\n// triggers google popup when we use googleAuthProvider for authentication and sign-in\nprovider.setCustomParameters({ prompt: \"select_account\" });\n// signInWithPopup contains popups for several services (sign in with twitter, facebook etc). We just want google\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n// export firebase as default in case we want entire library\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}
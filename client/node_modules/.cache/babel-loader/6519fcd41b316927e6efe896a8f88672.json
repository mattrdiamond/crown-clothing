{"ast":null,"code":"import ShopActionTypes from \"./shop.types\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nexport const fetchCollectionsStart = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection(\"collections\"); // set isFetching to true before starting async\n\n    dispatch(fetchCollectionsStart());\n    console.log(\"ref\", collectionRef); // .get() makes api call to fetch the data associated with collectionRef (snapshot obj from firestore)\n\n    collectionRef.get().then(snapshot => {\n      // convert snapshot's docs property (array) into new object and only include properties needed for front end\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot); // Update reducer with collectionsMap and set isFetching to false\n\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};","map":{"version":3,"sources":["/Users/matt_diamond/Documents/Lynda/udacity/_nano/Projects/crown-clothing/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","collectionsMap","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","console","log","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAKA,OAAO,MAAMC,qBAAqB,GAAGC,cAAc,KAAK;AACtDC,EAAAA,IAAI,EAAEL,eAAe,CAACM;AADgC,CAAL,CAA5C;AAIP,OAAO,MAAMC,uBAAuB,GAAGH,cAAc,KAAK;AACxDC,EAAAA,IAAI,EAAEL,eAAe,CAACQ,yBADkC;AAExDC,EAAAA,OAAO,EAAEL;AAF+C,CAAL,CAA9C;AAKP,OAAO,MAAMM,uBAAuB,GAAGC,YAAY,KAAK;AACtDN,EAAAA,IAAI,EAAEL,eAAe,CAACY,yBADgC;AAEtDH,EAAAA,OAAO,EAAEE;AAF6C,CAAL,CAA5C;AAKP,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC9C,SAAOC,QAAQ,IAAI;AACjB,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB,CADiB,CAEjB;;AACAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBH,aAAnB,EAJiB,CAKjB;;AACAA,IAAAA,aAAa,CACVI,GADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB;AACA,YAAMjB,cAAc,GAAGF,+BAA+B,CAACmB,QAAD,CAAtD,CAFgB,CAGhB;;AACAP,MAAAA,QAAQ,CAACP,uBAAuB,CAACH,cAAD,CAAxB,CAAR;AACD,KAPH,EAQGkB,KARH,CAQSC,KAAK,IAAIT,QAAQ,CAACJ,uBAAuB,CAACa,KAAK,CAACC,OAAP,CAAxB,CAR1B;AASD,GAfD;AAgBD,CAjBM","sourcesContent":["import ShopActionTypes from \"./shop.types\";\nimport {\n  firestore,\n  convertCollectionsSnapshotToMap\n} from \"../../firebase/firebase.utils\";\n\nexport const fetchCollectionsStart = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\n\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection(\"collections\");\n    // set isFetching to true before starting async\n    dispatch(fetchCollectionsStart());\n    console.log(\"ref\", collectionRef);\n    // .get() makes api call to fetch the data associated with collectionRef (snapshot obj from firestore)\n    collectionRef\n      .get()\n      .then(snapshot => {\n        // convert snapshot's docs property (array) into new object and only include properties needed for front end\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        // Update reducer with collectionsMap and set isFetching to false\n        dispatch(fetchCollectionsSuccess(collectionsMap));\n      })\n      .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
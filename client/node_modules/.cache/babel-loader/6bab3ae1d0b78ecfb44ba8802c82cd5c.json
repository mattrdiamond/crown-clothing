{"ast":null,"code":"var _jsxFileName = \"/Users/matt_diamond/Documents/Lynda/udacity/_nano/Projects/crown-clothing/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport HomePage from \"./pages/homepage/homepage.component\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport CheckoutPage from \"./pages/checkout/checkout.component.jsx\";\nimport Header from \"./components/header/header.component\";\nimport { auth, createUserProfileDocument, addCollectionAndDocuments } from \"./firebase/firebase.utils\";\nimport { connect } from \"react-redux\";\nimport { setCurrentUser } from \"./redux/user/user.actions\";\nimport { selectCurrentUser } from \"./redux/user/user.selectors\";\nimport { selectCollectionsForPreview } from \"./redux/shop/shop.selectors\";\nimport { createStructuredSelector } from \"reselect\";\nimport SignInAndSignUpPage from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.component\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    const {\n      setCurrentUser,\n      collectionsArray\n    } = this.props; // onAuthStateChanged is open subscription between app and firebase which lets us know\n    // when authentication state has changed without having to fetch manually.\n    // auth.onAuthStateChanged returns a function which when executed will close script subscription.\n    // @param userAuth: user authenticated object from Auth library, which persists when refreshing page. Includes user ID generated by FireStore (UID)\n\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        // get userReference from db or create one\n        const userRef = createUserProfileDocument(userAuth); // onSnapshot() subscribes to userRef and listens for any changes. Also returns initial state.\n        // snapShot.data() method gives us actual properties on the snapshot object (aka data)\n\n        (await userRef).onSnapshot(snapShot => {\n          setCurrentUser({\n            currentUser: {\n              id: snapShot.id,\n              ...snapShot.data()\n            }\n          });\n        });\n      } else {\n        // If user signs out, set currentUser to null\n        setCurrentUser(userAuth); // Add shop data to firestore\n\n        addCollectionAndDocuments(\"collections\", collectionsArray);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    // Close subscription to firebase to prevent memory leaks from open connection.\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/checkout\",\n      component: CheckoutPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/signin\",\n      render: () => this.props.currentUser ? React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }) : React.createElement(SignInAndSignUpPage, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  collectionsArray: selectCollectionsForPreview\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // component > propName: payload => dispatch(action(payload)) > reducer > root-reducer(store)\n  // setCurrentUser(user) returns the object from user action which includes action type and payload\n  // that action is then dispatched to user reducer and then to root-reducer\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/matt_diamond/Documents/Lynda/udacity/_nano/Projects/crown-clothing/src/App.js"],"names":["React","Switch","Route","Redirect","HomePage","ShopPage","CheckoutPage","Header","auth","createUserProfileDocument","addCollectionAndDocuments","connect","setCurrentUser","selectCurrentUser","selectCollectionsForPreview","createStructuredSelector","SignInAndSignUpPage","App","Component","unsubscribeFromAuth","componentDidMount","collectionsArray","props","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","currentUser","id","data","componentWillUnmount","render","mapStateToProps","mapDispatchToProps","dispatch","user"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport HomePage from \"./pages/homepage/homepage.component\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport CheckoutPage from \"./pages/checkout/checkout.component.jsx\";\nimport Header from \"./components/header/header.component\";\nimport {\n  auth,\n  createUserProfileDocument,\n  addCollectionAndDocuments\n} from \"./firebase/firebase.utils\";\nimport { connect } from \"react-redux\";\nimport { setCurrentUser } from \"./redux/user/user.actions\";\nimport { selectCurrentUser } from \"./redux/user/user.selectors\";\nimport { selectCollectionsForPreview } from \"./redux/shop/shop.selectors\";\nimport { createStructuredSelector } from \"reselect\";\nimport SignInAndSignUpPage from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.component\";\n\nclass App extends React.Component {\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n    const { setCurrentUser, collectionsArray } = this.props;\n\n    // onAuthStateChanged is open subscription between app and firebase which lets us know\n    // when authentication state has changed without having to fetch manually.\n    // auth.onAuthStateChanged returns a function which when executed will close script subscription.\n    // @param userAuth: user authenticated object from Auth library, which persists when refreshing page. Includes user ID generated by FireStore (UID)\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        // get userReference from db or create one\n        const userRef = createUserProfileDocument(userAuth);\n\n        // onSnapshot() subscribes to userRef and listens for any changes. Also returns initial state.\n        // snapShot.data() method gives us actual properties on the snapshot object (aka data)\n        (await userRef).onSnapshot(snapShot => {\n          setCurrentUser({\n            currentUser: {\n              id: snapShot.id,\n              ...snapShot.data()\n            }\n          });\n        });\n      } else {\n        // If user signs out, set currentUser to null\n        setCurrentUser(userAuth);\n        // Add shop data to firestore\n        addCollectionAndDocuments(\"collections\", collectionsArray);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    // Close subscription to firebase to prevent memory leaks from open connection.\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/shop\" component={ShopPage} />\n          <Route exact path=\"/checkout\" component={CheckoutPage} />\n          {/* If user signed in, redirect user to home page when clicking signin.\n            also redirects to home when user signs in.\n          render prop determines what component to return*/}\n          <Route\n            exact\n            path=\"/signin\"\n            render={() =>\n              this.props.currentUser ? (\n                <Redirect to=\"/\" />\n              ) : (\n                <SignInAndSignUpPage />\n              )\n            }\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  collectionsArray: selectCollectionsForPreview\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // component > propName: payload => dispatch(action(payload)) > reducer > root-reducer(store)\n  // setCurrentUser(user) returns the object from user action which includes action type and payload\n  // that action is then dispatched to user reducer and then to root-reducer\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}